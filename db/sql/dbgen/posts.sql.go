// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(
    created_by, content, username, id, filepath
) VALUES(
    $1, $2, $3, $4, $5
) RETURNING id, created_by, username, content, created_at, updated_at, filepath
`

type CreatePostParams struct {
	CreatedBy string
	Content   string
	Username  string
	ID        string
	Filepath  pgtype.Text
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.CreatedBy,
		arg.Content,
		arg.Username,
		arg.ID,
		arg.Filepath,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Username,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Filepath,
	)
	return i, err
}

const getOne = `-- name: GetOne :one
select id, created_by, username, content, created_at, updated_at, filepath from posts where id = $1
`

func (q *Queries) GetOne(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRow(ctx, getOne, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Username,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Filepath,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT id, created_by, username, content, created_at, updated_at, filepath from posts where created_by = $1 order by created_at desc
`

func (q *Queries) GetPostsByUser(ctx context.Context, createdBy string) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedBy,
			&i.Username,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Filepath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
