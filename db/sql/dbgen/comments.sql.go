// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package dbgen

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO COMMENTS(
    id, post_id, user_id, content, user_name
) VALUES(
    $1, $2, $3, $4, $5
) RETURNING id, post_id, user_id, content, created_at, updated_at, user_name
`

type CreateCommentParams struct {
	ID       string
	PostID   string
	UserID   string
	Content  string
	UserName string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.ID,
		arg.PostID,
		arg.UserID,
		arg.Content,
		arg.UserName,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
	)
	return i, err
}

const deleteCommentsByPost = `-- name: DeleteCommentsByPost :exec
DELETE FROM COMMENTS WHERE post_id = $1
`

func (q *Queries) DeleteCommentsByPost(ctx context.Context, postID string) error {
	_, err := q.db.Exec(ctx, deleteCommentsByPost, postID)
	return err
}

const getCommentsByPost = `-- name: GetCommentsByPost :many
select id, post_id, user_id, content, created_at, updated_at, user_name from comments where post_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetCommentsByPostParams struct {
	PostID string
	Limit  int32
	Offset int32
}

func (q *Queries) GetCommentsByPost(ctx context.Context, arg GetCommentsByPostParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByPost, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByPosts = `-- name: GetCommentsByPosts :many
SELECT c.id, c.post_id, c.user_id, c.content, c.created_at, c.updated_at, c.user_name from unnest($1::varchar[]) as post_ids
JOIN LATERAL (
    SELECT id, post_id, user_id, content, created_at, updated_at, user_name FROM comments WHERE post_id = post_ids ORDER BY created_at DESC LIMIT 3
) c ON true
`

func (q *Queries) GetCommentsByPosts(ctx context.Context, dollar_1 []string) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByPosts, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
