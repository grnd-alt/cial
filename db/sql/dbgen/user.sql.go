// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package dbgen

import (
	"context"
)

const getUserById = `-- name: GetUserById :one
SELECT id, user_id, username FROM users WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i User
	err := row.Scan(&i.ID, &i.UserID, &i.Username)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, user_id, username FROM users WHERE username = $1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, username)
	var i User
	err := row.Scan(&i.ID, &i.UserID, &i.Username)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (username, user_id) VALUES ($1, $2) ON CONFLICT (user_id) DO UPDATE set username = EXCLUDED.username where users.username <> EXCLUDED.username
`

type InsertUserParams struct {
	Username string
	UserID   string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser, arg.Username, arg.UserID)
	return err
}
