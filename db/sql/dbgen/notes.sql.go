// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notes.sql

package dbgen

import (
	"context"
)

const createNote = `-- name: CreateNote :one
INSERT INTO NOTES(
    created_by, title, content
) VALUES(
    $1, $2, $3
) RETURNING id, created_by, title, content, created_at, updated_at
`

type CreateNoteParams struct {
	CreatedBy string
	Title     string
	Content   string
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, arg.CreatedBy, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotesByUser = `-- name: GetNotesByUser :many
SELECT id, created_by, title, content, created_at, updated_at from NOTES where created_by = $1 order by created_at desc
`

func (q *Queries) GetNotesByUser(ctx context.Context, createdBy string) ([]Note, error) {
	rows, err := q.db.Query(ctx, getNotesByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.CreatedBy,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOne = `-- name: GetOne :one
select id, created_by, title, content, created_at, updated_at from notes where id = $1
`

func (q *Queries) GetOne(ctx context.Context, id int32) (Note, error) {
	row := q.db.QueryRow(ctx, getOne, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.CreatedBy,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
